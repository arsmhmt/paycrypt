from flask import Blueprint, render_template, request, flash, redirect, url_for, jsonify, send_from_directory, current_app, session, Response
from flask_login import login_required, current_user, login_user, logout_user, confirm_login
from flask_jwt_extended import create_access_token, create_refresh_token, jwt_required, get_jwt_identity, verify_jwt_in_request
from app import db
from app.models import Payment, PaymentStatus, Client, User, AuditTrail, AdminUser, ApiUsage, Setting, WithdrawalRequest, RecurringPayment
from app.forms import ClientForm, LoginForm
from app.decorators import admin_required, admin_login_required
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from datetime import datetime, timedelta
import os
import secrets
import string
import json
import csv
import io
from urllib.parse import urlparse, urljoin

# Create admin blueprint
admin_bp = Blueprint('admin', __name__, url_prefix='/admin')

# Make the blueprint available when importing from app.admin
__all__ = ['admin_bp', 'init_app']

# Import FinanceCalculator from utils
from app.utils.finance import FinanceCalculator

@admin_bp.route('/debug/password')
def debug_password():
    """Debug route to test password hashing"""
    test_password = 'test123'
    hash1 = generate_password_hash(test_password)
    hash2 = generate_password_hash(test_password)
    
    current_app.logger.debug(f"=== PASSWORD DEBUG ===")
    current_app.logger.debug(f"Test password: {test_password}")
    current_app.logger.debug(f"Hash 1: {hash1}")
    current_app.logger.debug(f"Hash 2: {hash2}")
    current_app.logger.debug(f"Compare 1: {check_password_hash(hash1, test_password)}")
    current_app.logger.debug(f"Compare 2: {check_password_hash(hash2, test_password)}")
    
    # Also test with the admin user's password
    admin = AdminUser.query.filter_by(username='admin').first()
    if admin:
        current_app.logger.debug(f"Admin user found: {admin.username}")
        current_app.logger.debug(f"Admin password hash: {admin.password_hash}")
        current_app.logger.debug(f"Test password check: {admin.check_password(test_password)}")
    
    return jsonify({
        'status': 'debug_complete',
        'test_password': test_password,
        'hash1': hash1,
        'hash2': hash2,
        'compare1': check_password_hash(hash1, test_password),
        'compare2': check_password_hash(hash2, test_password),
        'admin_exists': admin is not None
    })

def is_safe_url(target):
    ref_url = urlparse(request.host_url)
    test_url = urlparse(urljoin(request.host_url, target))
    return test_url.scheme in ('http', 'https') and ref_url.netloc == test_url.netloc

@admin_bp.route('/login', methods=['GET', 'POST'])
def admin_login():
    # Debug logging
    current_app.logger.debug("Admin login route accessed")
    current_app.logger.debug(f"Request method: {request.method}")
    current_app.logger.debug(f"Next URL: {request.args.get('next')}")
    
    # Handle already authenticated users
    if current_user.is_authenticated and hasattr(current_user, 'is_admin') and current_user.is_admin:
        next_page = request.args.get('next')
        current_app.logger.info(f"User already authenticated: {current_user.username}")
        return jsonify({
            'success': True,
            'redirect_url': next_page or url_for('admin.dashboard')
        })
    
    # Handle POST request (form submission)
    if request.method == 'POST':
        current_app.logger.debug("Login form submitted")
        current_app.logger.debug(f"Form data: {request.form}")
        
        # Get form data
        username = request.form.get('username')
        password = request.form.get('password')
        
        # Log the exact values received (except password)
        current_app.logger.debug(f"[AUTH] Request form data: {dict(request.form)}")
        current_app.logger.debug(f"[AUTH] Request JSON: {request.get_json(silent=True)}")
        current_app.logger.debug(f"[AUTH] Request content type: {request.content_type}")
        current_app.logger.debug(f"[AUTH] Request headers: {dict(request.headers)}")
        current_app.logger.debug(f"[AUTH] Received username: {username}")
        current_app.logger.debug(f"[AUTH] Received password length: {len(password) if password else 0}")
        current_app.logger.debug(f"[AUTH] Request form data keys: {list(request.form.keys())}")
        current_app.logger.debug(f"[AUTH] Request method: {request.method}")
        
        current_app.logger.debug(f"Username: {username}")
        current_app.logger.debug("Password received (not logged for security)")
        
        if not username or not password:
            flash('Username and password are required', 'error')
            current_app.logger.warning("Missing credentials")
            return render_template('admin/login.html', error='Username and password are required')
        
        # Find admin user by username
        admin = AdminUser.query.filter_by(username=username).first()
        
        if admin:
            current_app.logger.debug(f"[AUTH] Admin user found by username: {admin.username}")
            current_app.logger.debug(f"[AUTH] Password hash: {admin.password_hash[:10]}...")
            current_app.logger.debug(f"[AUTH] Is active: {admin.is_active}")
        else:
            # Try finding by email as well for better error reporting
            admin = AdminUser.query.filter_by(email=username).first()
            if admin:
                current_app.logger.debug(f"[AUTH] Admin user found by email: {admin.email}")
                current_app.logger.debug(f"[AUTH] Username for this email: {admin.username}")
            else:
                current_app.logger.warning(f"[AUTH] No admin found with username/email: {username}")
                flash('Invalid username or password', 'error')
                return redirect(url_for('admin.admin_login', next=request.args.get('next')))
        
        # Check password
        password_correct = admin.check_password(password)
        current_app.logger.debug(f"[AUTH] Password check result: {password_correct}")
        
        if admin and password_correct:
            current_app.logger.debug(f"[LOGIN] Password check passed for user: {admin.username}")
            current_app.logger.debug(f"[LOGIN] Password hash: {admin.password_hash[:10]}...")  # Log first 10 chars for debugging
            
            if not admin.is_active:
                current_app.logger.warning(f"[LOGIN] Account is deactivated: {admin.username}")
                return jsonify({
                    'success': False,
                    'error': 'This admin account has been deactivated'
                }), 403
            
            # Log in the admin user with remember=True
            login_result = login_user(admin, remember=True)
            current_app.logger.debug(f"[LOGIN] login_user() result: {login_result}")
            
            # Verify login state
            current_app.logger.debug(f"[LOGIN] User: {admin.username}")
            current_app.logger.debug(f"[LOGIN] Authenticated: {current_user.is_authenticated}")
            current_app.logger.debug(f"[LOGIN] User ID: {current_user.get_id() if hasattr(current_user, 'get_id') else None}")
            current_app.logger.debug(f"[LOGIN] User ID (direct): {current_user.id if hasattr(current_user, 'id') else None}")
            
            # Set session variable to indicate admin login
            session['is_admin'] = True
            current_app.logger.debug("[LOGIN] Session variable set")
            
            # Verify session
            current_app.logger.debug(f"[LOGIN] Session contents: {dict(session)}")
            
            # Determine the next page
            next_page = request.args.get('next') or request.form.get('next')
            # If not safe or empty, redirect to dashboard
            if not next_page or not is_safe_url(next_page) or next_page == url_for('admin.admin_login'):
                next_page = url_for('admin.admin_dashboard')
                
            # Check if the request wants JSON response
            current_app.logger.debug(f"[LOGIN] Login successful for user: {username}")
            current_app.logger.debug(f"[LOGIN] Next page: {next_page}")
            current_app.logger.debug(f"[LOGIN] Request accepts JSON: {request.accept_mimetypes.accept_json}")
            
            if request.accept_mimetypes.accept_json:
                response = jsonify({
                    'success': True,
                    'redirect_url': next_page
                })
                current_app.logger.debug(f"[LOGIN] Sending JSON response: {response.get_data(as_text=True)}")
                return response
                
            current_app.logger.debug("[LOGIN] Redirecting to:", next_page)
            return redirect(next_page)
            
        else:
            error_msg = f"[LOGIN] Login failed for username: {username}"
            current_app.logger.warning(error_msg)
            
            if request.accept_mimetypes.accept_json:
                return jsonify({
                    'success': False,
                    'error': 'Invalid username or password'
                }), 401
                
            flash('Invalid username or password', 'error')
            return redirect(url_for('admin.admin_login', next=request.args.get('next')))
    
    # Handle GET request (show login form)
    return render_template('admin/login.html', next=request.args.get('next', ''))

@admin_bp.route('/logout')
@login_required
@admin_login_required
def logout():
    logout_user()
    return redirect(url_for('admin.login'))

@admin_bp.route('/dashboard')
@admin_login_required
def admin_dashboard():
    # Log current user state
    current_app.logger.debug(f"[DASHBOARD] User: {current_user.username}")
    current_app.logger.debug(f"[DASHBOARD] Authenticated: {current_user.is_authenticated}")
    current_app.logger.debug(f"[DASHBOARD] Admin: {hasattr(current_user, 'is_admin') and current_user.is_admin}")
    current_app.logger.debug(f"[DASHBOARD] Session contents: {dict(session)}")
    
    # Add dashboard statistics and data here
    from app.models import WithdrawalRequest
    pending_withdrawals_count = WithdrawalRequest.query.filter_by(status='pending').count()
    return render_template('admin/dashboard.html', pending_withdrawals_count=pending_withdrawals_count)

def init_app(app):
    """Initialize the admin module with the Flask app."""
    # Configure upload folder
    UPLOAD_FOLDER = os.path.join(app.root_path, 'uploads')
    if not os.path.exists(UPLOAD_FOLDER):
        os.makedirs(UPLOAD_FOLDER)
        app.logger.info(f'Created upload directory at {UPLOAD_FOLDER}')
    
    app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
    
    return app

def log_audit(action, model, model_id, description, old_values=None, new_values=None):
    """Helper function to log audit trail"""
    if not isinstance(current_user, User):
        user_id = None
    else:
        user_id = current_user.id
        
    audit = AuditLog(
        admin_id=user_id,
        action=action,
        model=model,
        model_id=model_id,
        description=description,
        old_values=old_values or {},
        new_values=new_values or {},
        ip_address=request.remote_addr if request else None,
        user_agent=request.user_agent.string if request and hasattr(request, 'user_agent') else None
    )
    db.session.add(audit)
    try:
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Failed to log audit: {e}")
    return audit

# Quick Actions Routes
@admin_bp.route('/payment/<int:payment_id>/status/<status>', methods=['POST'])
@login_required
@admin_login_required
def mark_payment_status(payment_id, status):
    payment = Payment.query.get_or_404(payment_id)
    if status not in PaymentStatus.__members__:
        flash('Invalid status', 'error')
        return redirect(url_for('admin.view_payment', payment_id=payment_id))
    
    payment.status = status
    payment.updated_at = datetime.utcnow()
    payment.updated_by = current_user.id
    
    try:
        db.session.commit()
        flash(f'Payment status updated to {status}', 'success')
    except Exception as e:
        db.session.rollback()
        flash('Error updating payment status', 'error')
        
    return redirect(url_for('admin.view_payment', payment_id=payment_id))

@admin_bp.route('/payment/<int:payment_id>/invoice', methods=['POST'])
@login_required
@admin_login_required
def generate_invoice(payment_id):
    payment = Payment.query.get_or_404(payment_id)
    # TODO: Implement invoice generation logic
    flash('Invoice generation is not yet implemented', 'warning')
    return redirect(url_for('admin.view_payment', payment_id=payment_id))

@admin_bp.route('/payment/<int:payment_id>/receipt', methods=['POST'])
@login_required
@admin_login_required
def send_payment_receipt(payment_id):
    payment = Payment.query.get_or_404(payment_id)
    # TODO: Implement receipt sending logic
    flash('Receipt sending is not yet implemented', 'warning')
    return redirect(url_for('admin.view_payment', payment_id=payment_id))

@admin_bp.route('/payment/<int:payment_id>/refund', methods=['POST'])
@login_required
@admin_login_required
def process_refund(payment_id):
    payment = Payment.query.get_or_404(payment_id)
    # TODO: Implement refund processing logic
    flash('Refund processing is not yet implemented', 'warning')
    return redirect(url_for('admin.view_payment', payment_id=payment_id))

@admin_bp.route('/recurring-payment/<int:recurring_payment_id>/process', methods=['POST'])
@login_required
@admin_login_required
def process_recurring_payment(recurring_payment_id):
    """Process the next payment for a recurring payment"""
    recurring_payment = RecurringPayment.query.get_or_404(recurring_payment_id)
    payment = recurring_payment.process_next_payment()
    
    if payment:
        flash('Next payment processed successfully', 'success')
    else:
        flash('No payment processed (payment may be paused or completed)', 'warning')
    
    return redirect(url_for('admin.recurring_payments'))

# Notification Preferences Routes
@admin_bp.route('/notification-preferences')
@login_required
@admin_login_required
def notification_preferences():
    """Show notification preferences form"""
    form = NotificationPreferenceForm()
    return render_template('admin/notification_preferences.html', form=form)

@admin_bp.route('/user/<int:user_id>/preferences')
@login_required
@admin_login_required
def get_user_preferences(user_id):
    """Get user's notification preferences"""
    preferences = NotificationPreference.get_user_preferences(user_id)
    return jsonify([{
        'type': pref.notification_type,
        'event': pref.event_type,
        'enabled': pref.enabled
    } for pref in preferences])

@admin_bp.route('/save-notification-preferences', methods=['POST'])
@login_required
@admin_required
def save_notification_preferences():
    """Save notification preferences"""
    form = NotificationPreferenceForm()
    if form.validate_on_submit():
        try:
            preferences = form.get_preferences()
            user_id = form.user_id.data
            
            # Update preferences
            NotificationPreference.bulk_update_preferences(user_id, preferences)
            
            # Log audit trail
            AuditTrail.log_action(
                user_id=current_user.id,
                action_type=AuditActionType.UPDATE.value,
                entity_type='notification_preferences',
                entity_id=user_id,
                old_value=None,
                new_value=preferences,
                request=request
            )
            
            flash('Notification preferences saved successfully', 'success')
            return redirect(url_for('admin.notification_preferences'))
        except Exception as e:
            flash(f'Error saving preferences: {str(e)}', 'error')
    
    return render_template('admin/notification_preferences.html', form=form)

# Audit Trail Routes
@admin_bp.route('/audit-trail')
@login_required
@admin_required
def audit_trail():
    """Show audit trail entries with filtering"""
    # Get filter parameters
    action_type = request.args.get('action_type')
    entity_type = request.args.get('entity_type')
    entity_id = request.args.get('entity_id', type=int)
    user_id = request.args.get('user_id', type=int)
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    # Build query
    query = AuditTrail.query
    
    if action_type:
        query = query.filter_by(action_type=action_type)
    if entity_type:
        query = query.filter_by(entity_type=entity_type)
    if entity_id:
        query = query.filter_by(entity_id=entity_id)
    if user_id:
        query = query.filter_by(user_id=user_id)
    if start_date:
        query = query.filter(AuditTrail.created_at >= start_date)
    if end_date:
        query = query.filter(AuditTrail.created_at <= end_date)
    
    # Get users for dropdown
    users = User.query.all()
    
    # Get audit entries with pagination
    audit_entries = query.order_by(AuditTrail.created_at.desc()).all()
    
    return render_template('admin/audit_trail.html',
                         audit_entries=audit_entries,
                         users=users,
                         AuditActionType=AuditActionType)

# Payment Routes
@admin_bp.route('/payments/view/<int:payment_id>')
@admin_login_required
def view_payment(payment_id):
    """View details of a specific payment"""
    payment = Payment.query.get_or_404(payment_id)
    return render_template('admin/payments/view.html', payment=payment)

@admin_bp.route('/payments/list')
@admin_login_required
def payments_list():
    """Show list of all payments"""
    payments = Payment.query.order_by(Payment.created_at.desc()).all()
    return render_template('admin/payments/index.html', payments=payments)

@admin_bp.route('/payments/detailed-list')
@admin_login_required
def payments_detailed():
    """Show detailed payments list with client and user information"""
    # Get all payments with related client and user information
    payments = Payment.query.order_by(Payment.created_at.desc()).all()
    return render_template('admin/payments/index.html', payments=payments)

@admin_bp.route('/payments/create', methods=['GET', 'POST'])
@admin_login_required
def create_payment():
    """Create a new payment"""
    from app.forms import PaymentForm  # Import here to avoid circular imports
    
    form = PaymentForm()
    
    # Populate client choices
    form.client_id.choices = [(str(c.id), c.name) for c in Client.query.order_by('name').all()]
    
    if form.validate_on_submit():
        try:
            payment = Payment(
                client_id=form.client_id.data,
                amount=form.amount.data,
                currency=form.currency.data,
                description=form.description.data,
                status=form.status.data,
                payment_method=form.payment_method.data,
                transaction_id=form.transaction_id.data or None
            )
            db.session.add(payment)
            db.session.commit()
            
            flash('Payment created successfully!', 'success')
            return redirect(url_for('admin.payments_list'))  # <-- Düzeltildi
            
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(f'Error creating payment: {str(e)}')
            flash('An error occurred while creating the payment.', 'error')
    
    return render_template('admin/payments/create.html', form=form)


@admin_bp.route('/payments/recurring')
@admin_login_required
def recurring_payments():
    """Show all recurring payments"""
    recurring_payments = RecurringPayment.query.order_by(RecurringPayment.next_payment_date.asc()).all()
    return render_template('admin/payments/recurring.html', recurring_payments=recurring_payments)

# Withdrawal Routes
@admin_bp.route('/wallet/history')
@admin_login_required
def wallet_history():
    """Show wallet transaction history"""
    # Get all transactions (payments and withdrawals)
    payments = Payment.query.order_by(Payment.created_at.desc()).all()
    withdrawals = WithdrawalRequest.query.order_by(WithdrawalRequest.created_at.desc()).all()
    return render_template('admin/wallet/history.html', payments=payments, withdrawals=withdrawals)

@admin_bp.route('/withdrawals/list')
@admin_login_required
def withdrawals_list():
    """Show list of all withdrawal requests"""
    withdrawals = WithdrawalRequest.query.order_by(WithdrawalRequest.created_at.desc()).all()
    return render_template('admin/withdrawals/list.html', withdrawals=withdrawals)

@admin_bp.route('/withdrawals/bulk_approvals')
@admin_login_required
def bulk_approvals():
    """Show bulk approvals page"""
    pending_withdrawals = WithdrawalRequest.query.filter_by(status='pending').all()
    return render_template('admin/withdrawals/bulk_approvals.html', pending_withdrawals=pending_withdrawals)

@admin_bp.route('/withdrawals/approve/<int:withdrawal_id>', methods=['POST'])
@admin_login_required
def approve_withdrawal(withdrawal_id):
    """Approve a single withdrawal"""
    withdrawal = WithdrawalRequest.query.get_or_404(withdrawal_id)
    withdrawal.status = 'approved'
    withdrawal.approved_at = datetime.utcnow()
    withdrawal.approved_by = current_user.id
    db.session.commit()
    flash('Withdrawal approved successfully', 'success')
    return redirect(url_for('admin.withdrawals_list'))

@admin_bp.route('/withdrawals/reject/<int:withdrawal_id>', methods=['POST'])
@admin_login_required
def reject_withdrawal(withdrawal_id):
    """Reject a single withdrawal"""
    withdrawal = WithdrawalRequest.query.get_or_404(withdrawal_id)
    withdrawal.status = 'rejected'
    withdrawal.rejected_at = datetime.utcnow()
    withdrawal.rejected_by = current_user.id
    db.session.commit()
    flash('Withdrawal rejected successfully', 'success')
    return redirect(url_for('admin.withdrawals_list'))

@admin_bp.route('/withdrawals/bulk/approve', methods=['POST'])
@admin_login_required
def bulk_approve_withdrawals():
    """Approve multiple withdrawals"""
    withdrawals = request.form.getlist('withdrawals')
    for withdrawal_id in withdrawals:
        withdrawal = WithdrawalRequest.query.get_or_404(int(withdrawal_id))
        withdrawal.status = 'approved'
        withdrawal.approved_at = datetime.utcnow()
        withdrawal.approved_by = current_user.id
    db.session.commit()
    flash('Selected withdrawals approved successfully', 'success')
    return redirect(url_for('admin.withdrawals_list'))

@admin_bp.route('/withdrawals/bulk/reject', methods=['POST'])
@admin_login_required
def bulk_reject_withdrawals():
    """Reject multiple withdrawals"""
    withdrawals = request.form.getlist('withdrawals')
    for withdrawal_id in withdrawals:
        withdrawal = WithdrawalRequest.query.get_or_404(int(withdrawal_id))
        withdrawal.status = 'rejected'
        withdrawal.rejected_at = datetime.utcnow()
        withdrawal.rejected_by = current_user.id
    db.session.commit()
    flash('Selected withdrawals rejected successfully', 'success')
    return redirect(url_for('admin.withdrawals_list'))

# Report Routes
@admin_bp.route('/reports')
@admin_login_required
def reports():
    """Show all reports"""
    # Get all reports
    reports = Report.query.order_by(Report.created_at.desc()).all()
    return render_template('admin/reports/index.html', reports=reports)

@admin_bp.route('/report/new', methods=['GET', 'POST'])
@login_required
@admin_required
def create_report():
    """Create a new report"""
    form = ReportForm()
    if form.validate_on_submit():
        try:
            # Create report
            report = Report(
                name=form.name.data,
                description=form.description.data,
                report_type=form.report_type.data,
                filters=form.get_filters()
            )
            db.session.add(report)
            db.session.commit()
            
            # Log audit trail
            AuditTrail.log_action(
                user_id=current_user.id,
                action_type=AuditActionType.CREATE.value,
                entity_type='report',
                entity_id=report.id,
                new_value={
                    'name': report.name,
                    'type': report.report_type,
                    'filters': report.filters
                },
                request=request
            )
            
            flash('Report created successfully', 'success')
            return redirect(url_for('admin.reports'))
        except Exception as e:
            db.session.rollback()
            flash(f'Error creating report: {str(e)}', 'error')
    
    return render_template('admin/reports.html', form=form)

@admin_bp.route('/report/<int:report_id>')
@login_required
@admin_required
def view_report(report_id):
    """View a specific report"""
    report = Report.query.get_or_404(report_id)
    
    # Generate report data
    report_data = report.generate_report()
    
    # Format data for display
    if report_data:
        if report.report_type == ReportType.PAYMENT_SUMMARY.value:
            template = 'admin/_report_payment_summary.html'
        elif report.report_type == ReportType.CLIENT_ANALYSIS.value:
            template = 'admin/_report_client_analysis.html'
        elif report.report_type == ReportType.REVENUE_TRENDS.value:
            template = 'admin/_report_revenue_trends.html'
        elif report.report_type == ReportType.PAYMENT_METHODS.value:
            template = 'admin/_report_payment_methods.html'
        elif report.report_type == ReportType.OVERDUE_PAYMENTS.value:
            template = 'admin/_report_overdue_payments.html'
        
        return render_template(
            template,
            report=report,
            data=report_data
        )
    
    flash('Error generating report', 'error')
    return redirect(url_for('admin.reports'))

@admin_bp.route('/report/<int:report_id>/delete', methods=['POST'])
@login_required
@admin_required
def delete_report(report_id):
    """Delete a report"""
    report = Report.query.get_or_404(report_id)
    
    try:
        # Log audit trail
        AuditTrail.log_action(
            user_id=current_user.id,
            action_type=AuditActionType.DELETE.value,
            entity_type='report',
            entity_id=report_id,
            old_value={
                'name': report.name,
                'type': report.report_type,
                'filters': report.filters
            },
            request=request
        )
        
        db.session.delete(report)
        db.session.commit()
        flash('Report deleted successfully', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Error deleting report: {str(e)}', 'error')
    
    return redirect(url_for('admin.reports'))

@admin_bp.route('/report/<int:report_id>/export')
@login_required
@admin_required
def export_report(report_id):
    """Export report data"""
    report = Report.query.get_or_404(report_id)
    report_data = report.generate_report()
    
    if report_data:
        # Format filename
        filename = f"report_{report.name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        # Create response
        response = make_response(json.dumps(report_data, indent=2))
        response.headers['Content-Type'] = 'application/json'
        response.headers['Content-Disposition'] = f'attachment; filename="{filename}"'
        return response
    
    flash('Error exporting report', 'error')
    return redirect(url_for('admin.reports'))



# Access Control Routes
@admin_bp.route('/access-control', methods=['GET', 'POST'])
@admin_login_required
def access_control():
    """Admin role management"""
    admin_users = AdminUser.query.all()
    return render_template('admin/access_control.html', admin_users=admin_users)

# Commission Reports Routes
@admin_bp.route('/commission-reports', methods=['GET'])
@admin_login_required
def commission_reports():
    """Commission reports dashboard"""
    # Get commission data using FinanceCalculator
    total_commissions = calculator.calculate_total_commissions()
    return render_template('admin/commission_reports.html', total_commissions=total_commissions)

# Platform Balance Routes
@admin_bp.route('/platform-balance', methods=['GET'])
@admin_login_required
def platform_balance():
    """Platform balance overview"""
    # Calculate platform balance using FinanceCalculator
    balance = calculator.calculate_platform_balance()
    return render_template('admin/platform_balance.html', balance=balance)

# API Documentation Routes
@admin_bp.route('/api-docs', methods=['GET'])
@admin_login_required
def api_docs():
    """API documentation"""
    return render_template('admin/api_docs.html')

# Support Tickets Routes
@admin_bp.route('/support-tickets', methods=['GET', 'POST'])
@admin_login_required
def support_tickets():
    """Support tickets management"""
    tickets = SupportTicket.query.all()
    return render_template('admin/support_tickets.html', tickets=tickets)

# Settings Routes
@admin_bp.route('/settings', methods=['GET', 'POST'])
@login_required
@admin_required
def settings():
    """Show settings page"""
    # Get all settings grouped by type
    settings = Setting.get_all_settings()
    
    # Create form with current values
    form = SettingForm(setting_type=request.args.get('type', SettingType.SYSTEM.value))
    
    # Populate form fields with current values
    for setting in settings.get(form.setting_type, []):
        if setting.key in form.fields:
            form.fields[setting.key].data = setting.value
    
    return render_template('admin/settings.html', 
                         settings=settings,
                         form=form)

@admin_bp.route('/settings/general')
@login_required
@admin_required
def general_settings():
    """General system settings"""
    return render_template('admin/settings/general.html')

@admin_bp.route('/settings/payment-methods')
@login_required
@admin_required
def payment_methods():
    """Payment methods configuration"""
    return render_template('admin/settings/payment_methods.html')

@admin_bp.route('/settings/email-templates')
@login_required
@admin_required
def email_templates():
    """Email templates management"""
    return render_template('admin/settings/email_templates.html')

@admin_bp.route('/settings/api')
@login_required
@admin_required
def api_settings():
    """API settings and keys"""
    return render_template('admin/settings/api_settings.html')

# Withdrawal Routes
@admin_bp.route('/withdrawals')
@login_required
@admin_required
def list_withdrawals():
    """Show all withdrawal requests"""
    # Get query parameters for filtering
    status = request.args.get('status', 'all')
    page = request.args.get('page', 1, type=int)
    per_page = 20
    
    # Base query
    query = WithdrawalRequest.query
    
    # Apply filters
    if status != 'all':
        query = query.filter(WithdrawalRequest.status == status)
    
    # Order by creation date (newest first)
    withdrawals = query.order_by(WithdrawalRequest.created_at.desc())\
        .paginate(page=page, per_page=per_page, error_out=False)
    
    # Get counts for each status
    status_counts = {
        'pending': WithdrawalRequest.query.filter_by(status='pending').count(),
        'approved': WithdrawalRequest.query.filter_by(status='approved').count(),
        'completed': WithdrawalRequest.query.filter_by(status='completed').count(),
        'rejected': WithdrawalRequest.query.filter_by(status='rejected').count(),
        'cancelled': WithdrawalRequest.query.filter_by(status='cancelled').count(),
        'all': WithdrawalRequest.query.count()
    }
    
    # Get pending withdrawals count for the badge
    pending_withdrawals_count = WithdrawalRequest.query.filter_by(status='pending').count()
    
    return render_template('admin/withdrawals/list.html', 
                         withdrawals=withdrawals,
                         status=status,
                         status_counts=status_counts,
                         pending_withdrawals_count=pending_withdrawals_count)

# Payment Routes


@admin_bp.route('/system/logs')
@login_required
@admin_required
def system_logs():
    """View system logs"""
    return render_template('admin/system/logs.html')

@admin_bp.route('/system/backup')
@login_required
@admin_required
def backup():
    """Database backup and restore"""
    return render_template('admin/system/backup.html')

@admin_bp.route('/system/maintenance')
@login_required
@admin_required
def maintenance():
    """System maintenance tools"""
    return render_template('admin/system/maintenance.html')

@admin_bp.route('/save-settings', methods=['POST'])
@login_required
@admin_required
def save_settings():
    """Save settings"""
    form = SettingForm(request.form)
    if form.validate():
        try:
            setting_type = request.form.get('setting_type')
            
            # Update each setting
            for key, field in form.fields.items():
                if field.data is not None:
                    Setting.update_setting(key, field.data)
            
            # Log audit trail
            AuditTrail.log_action(
                user_id=current_user.id,
                action_type=AuditActionType.UPDATE.value,
                entity_type='settings',
                entity_id=0,
                old_value=None,
                new_value={
                    'type': setting_type,
                    'changes': request.form.to_dict()
                },
                request=request
            )
            
            flash('Settings saved successfully', 'success')
            return redirect(url_for('admin.settings', type=setting_type))
        except Exception as e:
            db.session.rollback()
            flash(f'Error saving settings: {str(e)}', 'error')
    
    # If validation failed, show form again with errors
    settings = Setting.get_all_settings()
    return render_template('admin/settings.html', 
                         settings=settings,
                         form=form)

@admin_bp.route('/reset-settings/<string:setting_type>')
@login_required
@admin_required
def reset_settings(setting_type):
    """Reset settings to default values"""
    try:
        # Delete all settings of this type
        Setting.query.filter_by(setting_type=setting_type).delete()
        
        # Create default settings
        Setting.create_default_settings()
        
        # Log audit trail
        AuditTrail.log_action(
            user_id=current_user.id,
            action_type=AuditActionType.DELETE.value,
            entity_type='settings',
            entity_id=0,
            old_value=None,
            request=request
        )
        
        flash('Settings reset to default values', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Error resetting settings: {str(e)}', 'error')
    
    return redirect(url_for('admin.settings', type=setting_type))

@admin_bp.route('/test-settings/<string:setting_type>')
@login_required
@admin_required
def test_settings(setting_type):
    """Test settings configuration"""
    try:
        # Get settings of this type
        settings = Setting.query.filter_by(setting_type=setting_type).all()
        
        # Test specific settings based on type
        if setting_type == SettingType.EMAIL.value:
            # Test email settings
            from flask_mail import Message
            from app.extensions import mail
            
            msg = Message(
                subject='Test Email Configuration',
                sender=settings[0].value,  # Use first email setting as sender
                recipients=['test@example.com'],
                body='This is a test email to verify your email configuration.'
            )
            mail.send(msg)
            
            flash('Test email sent successfully', 'success')
        elif setting_type == SettingType.INTEGRATION.value:
            # Test payment integrations
            stripe_key = Setting.get_setting(SettingKey.STRIPE_API_KEY.value)
            if stripe_key and stripe_key.value:
                import stripe
                stripe.api_key = stripe_key.value
                stripe.Customer.create(
                    email='test@example.com',
                    description='Test customer'
                )
                flash('Stripe integration test successful', 'success')
            else:
                flash('No Stripe API key configured', 'warning')
    except Exception as e:
        flash(f'Test failed: {str(e)}', 'error')
    
    return redirect(url_for('admin.settings', type=setting_type))
